/*
StampWallet API Server

StampWallet API Server REST Specification

API version: 0.1.0
Contact: fbstachura@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetBusinessItemDefinitionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetBusinessItemDefinitionsResponse{}

// GetBusinessItemDefinitionsResponse struct for GetBusinessItemDefinitionsResponse
type GetBusinessItemDefinitionsResponse struct {
	ItemDefinitions []ItemDefinitionAPIModel `json:"itemDefinitions,omitempty"`
}

// NewGetBusinessItemDefinitionsResponse instantiates a new GetBusinessItemDefinitionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetBusinessItemDefinitionsResponse() *GetBusinessItemDefinitionsResponse {
	this := GetBusinessItemDefinitionsResponse{}
	return &this
}

// NewGetBusinessItemDefinitionsResponseWithDefaults instantiates a new GetBusinessItemDefinitionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetBusinessItemDefinitionsResponseWithDefaults() *GetBusinessItemDefinitionsResponse {
	this := GetBusinessItemDefinitionsResponse{}
	return &this
}

// GetItemDefinitions returns the ItemDefinitions field value if set, zero value otherwise.
func (o *GetBusinessItemDefinitionsResponse) GetItemDefinitions() []ItemDefinitionAPIModel {
	if o == nil || isNil(o.ItemDefinitions) {
		var ret []ItemDefinitionAPIModel
		return ret
	}
	return o.ItemDefinitions
}

// GetItemDefinitionsOk returns a tuple with the ItemDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetBusinessItemDefinitionsResponse) GetItemDefinitionsOk() ([]ItemDefinitionAPIModel, bool) {
	if o == nil || isNil(o.ItemDefinitions) {
		return nil, false
	}
	return o.ItemDefinitions, true
}

// HasItemDefinitions returns a boolean if a field has been set.
func (o *GetBusinessItemDefinitionsResponse) HasItemDefinitions() bool {
	if o != nil && !isNil(o.ItemDefinitions) {
		return true
	}

	return false
}

// SetItemDefinitions gets a reference to the given []ItemDefinitionAPIModel and assigns it to the ItemDefinitions field.
func (o *GetBusinessItemDefinitionsResponse) SetItemDefinitions(v []ItemDefinitionAPIModel) {
	o.ItemDefinitions = v
}

func (o GetBusinessItemDefinitionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetBusinessItemDefinitionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ItemDefinitions) {
		toSerialize["itemDefinitions"] = o.ItemDefinitions
	}
	return toSerialize, nil
}

type NullableGetBusinessItemDefinitionsResponse struct {
	value *GetBusinessItemDefinitionsResponse
	isSet bool
}

func (v NullableGetBusinessItemDefinitionsResponse) Get() *GetBusinessItemDefinitionsResponse {
	return v.value
}

func (v *NullableGetBusinessItemDefinitionsResponse) Set(val *GetBusinessItemDefinitionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBusinessItemDefinitionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBusinessItemDefinitionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBusinessItemDefinitionsResponse(val *GetBusinessItemDefinitionsResponse) *NullableGetBusinessItemDefinitionsResponse {
	return &NullableGetBusinessItemDefinitionsResponse{value: val, isSet: true}
}

func (v NullableGetBusinessItemDefinitionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBusinessItemDefinitionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

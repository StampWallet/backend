// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StampWallet/backend/internal/database (interfaces: GormDB)

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
	clause "gorm.io/gorm/clause"
)

// MockGormDB is a mock of GormDB interface.
type MockGormDB struct {
	ctrl     *gomock.Controller
	recorder *MockGormDBMockRecorder
}

// MockGormDBMockRecorder is the mock recorder for MockGormDB.
type MockGormDBMockRecorder struct {
	mock *MockGormDB
}

// NewMockGormDB creates a new mock instance.
func NewMockGormDB(ctrl *gomock.Controller) *MockGormDB {
	mock := &MockGormDB{ctrl: ctrl}
	mock.recorder = &MockGormDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGormDB) EXPECT() *MockGormDBMockRecorder {
	return m.recorder
}

// AddError mocks base method.
func (m *MockGormDB) AddError(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddError", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddError indicates an expected call of AddError.
func (mr *MockGormDBMockRecorder) AddError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddError", reflect.TypeOf((*MockGormDB)(nil).AddError), arg0)
}

// Assign mocks base method.
func (m *MockGormDB) Assign(arg0 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Assign", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Assign indicates an expected call of Assign.
func (mr *MockGormDBMockRecorder) Assign(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockGormDB)(nil).Assign), arg0...)
}

// Association mocks base method.
func (m *MockGormDB) Association(arg0 string) *gorm.Association {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Association", arg0)
	ret0, _ := ret[0].(*gorm.Association)
	return ret0
}

// Association indicates an expected call of Association.
func (mr *MockGormDBMockRecorder) Association(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Association", reflect.TypeOf((*MockGormDB)(nil).Association), arg0)
}

// Attrs mocks base method.
func (m *MockGormDB) Attrs(arg0 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attrs", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Attrs indicates an expected call of Attrs.
func (mr *MockGormDBMockRecorder) Attrs(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*MockGormDB)(nil).Attrs), arg0...)
}

// AutoMigrate mocks base method.
func (m *MockGormDB) AutoMigrate(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate.
func (mr *MockGormDBMockRecorder) AutoMigrate(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockGormDB)(nil).AutoMigrate), arg0...)
}

// Begin mocks base method.
func (m *MockGormDB) Begin(arg0 ...*sql.TxOptions) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Begin", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockGormDBMockRecorder) Begin(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockGormDB)(nil).Begin), arg0...)
}

// Clauses mocks base method.
func (m *MockGormDB) Clauses(arg0 ...clause.Expression) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Clauses", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Clauses indicates an expected call of Clauses.
func (mr *MockGormDBMockRecorder) Clauses(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clauses", reflect.TypeOf((*MockGormDB)(nil).Clauses), arg0...)
}

// Commit mocks base method.
func (m *MockGormDB) Commit() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockGormDBMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGormDB)(nil).Commit))
}

// Connection mocks base method.
func (m *MockGormDB) Connection(arg0 func(*gorm.DB) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockGormDBMockRecorder) Connection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockGormDB)(nil).Connection), arg0)
}

// Count mocks base method.
func (m *MockGormDB) Count(arg0 *int64) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockGormDBMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockGormDB)(nil).Count), arg0)
}

// Create mocks base method.
func (m *MockGormDB) Create(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGormDBMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGormDB)(nil).Create), arg0)
}

// CreateInBatches mocks base method.
func (m *MockGormDB) CreateInBatches(arg0 interface{}, arg1 int) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInBatches", arg0, arg1)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// CreateInBatches indicates an expected call of CreateInBatches.
func (mr *MockGormDBMockRecorder) CreateInBatches(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInBatches", reflect.TypeOf((*MockGormDB)(nil).CreateInBatches), arg0, arg1)
}

// DB mocks base method.
func (m *MockGormDB) DB() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DB indicates an expected call of DB.
func (mr *MockGormDBMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockGormDB)(nil).DB))
}

// Debug mocks base method.
func (m *MockGormDB) Debug() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockGormDBMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockGormDB)(nil).Debug))
}

// Delete mocks base method.
func (m *MockGormDB) Delete(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGormDBMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGormDB)(nil).Delete), varargs...)
}

// Distinct mocks base method.
func (m *MockGormDB) Distinct(arg0 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distinct", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Distinct indicates an expected call of Distinct.
func (mr *MockGormDBMockRecorder) Distinct(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockGormDB)(nil).Distinct), arg0...)
}

// Exec mocks base method.
func (m *MockGormDB) Exec(arg0 string, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockGormDBMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockGormDB)(nil).Exec), varargs...)
}

// Find mocks base method.
func (m *MockGormDB) Find(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockGormDBMockRecorder) Find(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockGormDB)(nil).Find), varargs...)
}

// FindInBatches mocks base method.
func (m *MockGormDB) FindInBatches(arg0 interface{}, arg1 int, arg2 func(*gorm.DB, int) error) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInBatches", arg0, arg1, arg2)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// FindInBatches indicates an expected call of FindInBatches.
func (mr *MockGormDBMockRecorder) FindInBatches(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInBatches", reflect.TypeOf((*MockGormDB)(nil).FindInBatches), arg0, arg1, arg2)
}

// First mocks base method.
func (m *MockGormDB) First(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockGormDBMockRecorder) First(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockGormDB)(nil).First), varargs...)
}

// FirstOrCreate mocks base method.
func (m *MockGormDB) FirstOrCreate(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrCreate", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// FirstOrCreate indicates an expected call of FirstOrCreate.
func (mr *MockGormDBMockRecorder) FirstOrCreate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockGormDB)(nil).FirstOrCreate), varargs...)
}

// FirstOrInit mocks base method.
func (m *MockGormDB) FirstOrInit(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FirstOrInit", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// FirstOrInit indicates an expected call of FirstOrInit.
func (mr *MockGormDBMockRecorder) FirstOrInit(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrInit", reflect.TypeOf((*MockGormDB)(nil).FirstOrInit), varargs...)
}

// Get mocks base method.
func (m *MockGormDB) Get(arg0 string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGormDBMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGormDB)(nil).Get), arg0)
}

// Group mocks base method.
func (m *MockGormDB) Group(arg0 string) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockGormDBMockRecorder) Group(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockGormDB)(nil).Group), arg0)
}

// Having mocks base method.
func (m *MockGormDB) Having(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Having indicates an expected call of Having.
func (mr *MockGormDBMockRecorder) Having(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockGormDB)(nil).Having), varargs...)
}

// InnerJoins mocks base method.
func (m *MockGormDB) InnerJoins(arg0 string, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InnerJoins", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// InnerJoins indicates an expected call of InnerJoins.
func (mr *MockGormDBMockRecorder) InnerJoins(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InnerJoins", reflect.TypeOf((*MockGormDB)(nil).InnerJoins), varargs...)
}

// InstanceGet mocks base method.
func (m *MockGormDB) InstanceGet(arg0 string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceGet", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// InstanceGet indicates an expected call of InstanceGet.
func (mr *MockGormDBMockRecorder) InstanceGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceGet", reflect.TypeOf((*MockGormDB)(nil).InstanceGet), arg0)
}

// InstanceSet mocks base method.
func (m *MockGormDB) InstanceSet(arg0 string, arg1 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceSet", arg0, arg1)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// InstanceSet indicates an expected call of InstanceSet.
func (mr *MockGormDBMockRecorder) InstanceSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceSet", reflect.TypeOf((*MockGormDB)(nil).InstanceSet), arg0, arg1)
}

// Joins mocks base method.
func (m *MockGormDB) Joins(arg0 string, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Joins indicates an expected call of Joins.
func (mr *MockGormDBMockRecorder) Joins(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockGormDB)(nil).Joins), varargs...)
}

// Last mocks base method.
func (m *MockGormDB) Last(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Last indicates an expected call of Last.
func (mr *MockGormDBMockRecorder) Last(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockGormDB)(nil).Last), varargs...)
}

// Limit mocks base method.
func (m *MockGormDB) Limit(arg0 int) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockGormDBMockRecorder) Limit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockGormDB)(nil).Limit), arg0)
}

// Migrator mocks base method.
func (m *MockGormDB) Migrator() gorm.Migrator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrator")
	ret0, _ := ret[0].(gorm.Migrator)
	return ret0
}

// Migrator indicates an expected call of Migrator.
func (mr *MockGormDBMockRecorder) Migrator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrator", reflect.TypeOf((*MockGormDB)(nil).Migrator))
}

// Model mocks base method.
func (m *MockGormDB) Model(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockGormDBMockRecorder) Model(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockGormDB)(nil).Model), arg0)
}

// Not mocks base method.
func (m *MockGormDB) Not(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Not", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Not indicates an expected call of Not.
func (mr *MockGormDBMockRecorder) Not(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Not", reflect.TypeOf((*MockGormDB)(nil).Not), varargs...)
}

// Offset mocks base method.
func (m *MockGormDB) Offset(arg0 int) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockGormDBMockRecorder) Offset(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockGormDB)(nil).Offset), arg0)
}

// Omit mocks base method.
func (m *MockGormDB) Omit(arg0 ...string) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockGormDBMockRecorder) Omit(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockGormDB)(nil).Omit), arg0...)
}

// Or mocks base method.
func (m *MockGormDB) Or(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Or", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Or indicates an expected call of Or.
func (mr *MockGormDBMockRecorder) Or(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Or", reflect.TypeOf((*MockGormDB)(nil).Or), varargs...)
}

// Order mocks base method.
func (m *MockGormDB) Order(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Order", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockGormDBMockRecorder) Order(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockGormDB)(nil).Order), arg0)
}

// Pluck mocks base method.
func (m *MockGormDB) Pluck(arg0 string, arg1 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pluck", arg0, arg1)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Pluck indicates an expected call of Pluck.
func (mr *MockGormDBMockRecorder) Pluck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pluck", reflect.TypeOf((*MockGormDB)(nil).Pluck), arg0, arg1)
}

// Preload mocks base method.
func (m *MockGormDB) Preload(arg0 string, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Preload indicates an expected call of Preload.
func (mr *MockGormDBMockRecorder) Preload(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockGormDB)(nil).Preload), varargs...)
}

// Raw mocks base method.
func (m *MockGormDB) Raw(arg0 string, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Raw", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockGormDBMockRecorder) Raw(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockGormDB)(nil).Raw), varargs...)
}

// Rollback mocks base method.
func (m *MockGormDB) Rollback() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockGormDBMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockGormDB)(nil).Rollback))
}

// RollbackTo mocks base method.
func (m *MockGormDB) RollbackTo(arg0 string) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTo", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// RollbackTo indicates an expected call of RollbackTo.
func (mr *MockGormDBMockRecorder) RollbackTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTo", reflect.TypeOf((*MockGormDB)(nil).RollbackTo), arg0)
}

// Row mocks base method.
func (m *MockGormDB) Row() *sql.Row {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Row")
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// Row indicates an expected call of Row.
func (mr *MockGormDBMockRecorder) Row() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Row", reflect.TypeOf((*MockGormDB)(nil).Row))
}

// Rows mocks base method.
func (m *MockGormDB) Rows() (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rows")
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rows indicates an expected call of Rows.
func (mr *MockGormDBMockRecorder) Rows() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rows", reflect.TypeOf((*MockGormDB)(nil).Rows))
}

// Save mocks base method.
func (m *MockGormDB) Save(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockGormDBMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockGormDB)(nil).Save), arg0)
}

// SavePoint mocks base method.
func (m *MockGormDB) SavePoint(arg0 string) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePoint", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// SavePoint indicates an expected call of SavePoint.
func (mr *MockGormDBMockRecorder) SavePoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePoint", reflect.TypeOf((*MockGormDB)(nil).SavePoint), arg0)
}

// Scan mocks base method.
func (m *MockGormDB) Scan(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockGormDBMockRecorder) Scan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockGormDB)(nil).Scan), arg0)
}

// ScanRows mocks base method.
func (m *MockGormDB) ScanRows(arg0 *sql.Rows, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanRows", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanRows indicates an expected call of ScanRows.
func (mr *MockGormDBMockRecorder) ScanRows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanRows", reflect.TypeOf((*MockGormDB)(nil).ScanRows), arg0, arg1)
}

// Scopes mocks base method.
func (m *MockGormDB) Scopes(arg0 ...func(*gorm.DB) *gorm.DB) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scopes", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Scopes indicates an expected call of Scopes.
func (mr *MockGormDBMockRecorder) Scopes(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scopes", reflect.TypeOf((*MockGormDB)(nil).Scopes), arg0...)
}

// Select mocks base method.
func (m *MockGormDB) Select(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockGormDBMockRecorder) Select(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockGormDB)(nil).Select), varargs...)
}

// Session mocks base method.
func (m *MockGormDB) Session(arg0 *gorm.Session) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockGormDBMockRecorder) Session(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockGormDB)(nil).Session), arg0)
}

// Set mocks base method.
func (m *MockGormDB) Set(arg0 string, arg1 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockGormDBMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGormDB)(nil).Set), arg0, arg1)
}

// SetupJoinTable mocks base method.
func (m *MockGormDB) SetupJoinTable(arg0 interface{}, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupJoinTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupJoinTable indicates an expected call of SetupJoinTable.
func (mr *MockGormDBMockRecorder) SetupJoinTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupJoinTable", reflect.TypeOf((*MockGormDB)(nil).SetupJoinTable), arg0, arg1, arg2)
}

// Table mocks base method.
func (m *MockGormDB) Table(arg0 string, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Table", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Table indicates an expected call of Table.
func (mr *MockGormDBMockRecorder) Table(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Table", reflect.TypeOf((*MockGormDB)(nil).Table), varargs...)
}

// Take mocks base method.
func (m *MockGormDB) Take(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Take", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Take indicates an expected call of Take.
func (mr *MockGormDBMockRecorder) Take(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockGormDB)(nil).Take), varargs...)
}

// ToSQL mocks base method.
func (m *MockGormDB) ToSQL(arg0 func(*gorm.DB) *gorm.DB) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSQL", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ToSQL indicates an expected call of ToSQL.
func (mr *MockGormDBMockRecorder) ToSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSQL", reflect.TypeOf((*MockGormDB)(nil).ToSQL), arg0)
}

// Transaction mocks base method.
func (m *MockGormDB) Transaction(arg0 func(*gorm.DB) error, arg1 ...*sql.TxOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockGormDBMockRecorder) Transaction(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockGormDB)(nil).Transaction), varargs...)
}

// Unscoped mocks base method.
func (m *MockGormDB) Unscoped() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Unscoped indicates an expected call of Unscoped.
func (mr *MockGormDBMockRecorder) Unscoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockGormDB)(nil).Unscoped))
}

// Update mocks base method.
func (m *MockGormDB) Update(arg0 string, arg1 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGormDBMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGormDB)(nil).Update), arg0, arg1)
}

// UpdateColumn mocks base method.
func (m *MockGormDB) UpdateColumn(arg0 string, arg1 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumn", arg0, arg1)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// UpdateColumn indicates an expected call of UpdateColumn.
func (mr *MockGormDBMockRecorder) UpdateColumn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumn", reflect.TypeOf((*MockGormDB)(nil).UpdateColumn), arg0, arg1)
}

// UpdateColumns mocks base method.
func (m *MockGormDB) UpdateColumns(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumns", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// UpdateColumns indicates an expected call of UpdateColumns.
func (mr *MockGormDBMockRecorder) UpdateColumns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumns", reflect.TypeOf((*MockGormDB)(nil).UpdateColumns), arg0)
}

// Updates mocks base method.
func (m *MockGormDB) Updates(arg0 interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Updates indicates an expected call of Updates.
func (mr *MockGormDBMockRecorder) Updates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockGormDB)(nil).Updates), arg0)
}

// Use mocks base method.
func (m *MockGormDB) Use(arg0 gorm.Plugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockGormDBMockRecorder) Use(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockGormDB)(nil).Use), arg0)
}

// Where mocks base method.
func (m *MockGormDB) Where(arg0 interface{}, arg1 ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockGormDBMockRecorder) Where(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockGormDB)(nil).Where), varargs...)
}

// WithContext mocks base method.
func (m *MockGormDB) WithContext(arg0 context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockGormDBMockRecorder) WithContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockGormDB)(nil).WithContext), arg0)
}

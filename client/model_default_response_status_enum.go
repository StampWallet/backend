/*
StampWallet API Server

StampWallet API Server REST Specification

API version: 0.1.0
Contact: fbstachura@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DefaultResponseStatusEnum the model 'DefaultResponseStatusEnum'
type DefaultResponseStatusEnum string

// List of DefaultResponseStatusEnum
const (
	OK              DefaultResponseStatusEnum = "OK"
	CREATED         DefaultResponseStatusEnum = "CREATED"
	NOT_FOUND       DefaultResponseStatusEnum = "NOT_FOUND"
	FORBIDDEN       DefaultResponseStatusEnum = "FORBIDDEN"
	ALREADY_EXISTS  DefaultResponseStatusEnum = "ALREADY_EXISTS"
	UNAUTHORIZED    DefaultResponseStatusEnum = "UNAUTHORIZED"
	INVALID_REQUEST DefaultResponseStatusEnum = "INVALID_REQUEST"
	UNKNOWN_ERROR   DefaultResponseStatusEnum = "UNKNOWN_ERROR"
	CONFLICT        DefaultResponseStatusEnum = "CONFLICT"
)

// All allowed values of DefaultResponseStatusEnum enum
var AllowedDefaultResponseStatusEnumEnumValues = []DefaultResponseStatusEnum{
	"OK",
	"CREATED",
	"NOT_FOUND",
	"FORBIDDEN",
	"ALREADY_EXISTS",
	"UNAUTHORIZED",
	"INVALID_REQUEST",
	"UNKNOWN_ERROR",
	"CONFLICT",
}

func (v *DefaultResponseStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DefaultResponseStatusEnum(value)
	for _, existing := range AllowedDefaultResponseStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DefaultResponseStatusEnum", value)
}

// NewDefaultResponseStatusEnumFromValue returns a pointer to a valid DefaultResponseStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDefaultResponseStatusEnumFromValue(v string) (*DefaultResponseStatusEnum, error) {
	ev := DefaultResponseStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DefaultResponseStatusEnum: valid values are %v", v, AllowedDefaultResponseStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DefaultResponseStatusEnum) IsValid() bool {
	for _, existing := range AllowedDefaultResponseStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DefaultResponseStatusEnum value
func (v DefaultResponseStatusEnum) Ptr() *DefaultResponseStatusEnum {
	return &v
}

type NullableDefaultResponseStatusEnum struct {
	value *DefaultResponseStatusEnum
	isSet bool
}

func (v NullableDefaultResponseStatusEnum) Get() *DefaultResponseStatusEnum {
	return v.value
}

func (v *NullableDefaultResponseStatusEnum) Set(val *DefaultResponseStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultResponseStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultResponseStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultResponseStatusEnum(val *DefaultResponseStatusEnum) *NullableDefaultResponseStatusEnum {
	return &NullableDefaultResponseStatusEnum{value: val, isSet: true}
}

func (v NullableDefaultResponseStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultResponseStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

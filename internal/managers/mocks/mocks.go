// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StampWallet/backend/internal/managers (interfaces: AuthManager)

// Package mock_managers is a generated GoMock package.
package mock_managers

import (
	reflect "reflect"

	database "github.com/StampWallet/backend/internal/database"
	managers "github.com/StampWallet/backend/internal/managers"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthManager is a mock of AuthManager interface.
type MockAuthManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuthManagerMockRecorder
}

// MockAuthManagerMockRecorder is the mock recorder for MockAuthManager.
type MockAuthManagerMockRecorder struct {
	mock *MockAuthManager
}

// NewMockAuthManager creates a new mock instance.
func NewMockAuthManager(ctrl *gomock.Controller) *MockAuthManager {
	mock := &MockAuthManager{ctrl: ctrl}
	mock.recorder = &MockAuthManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthManager) EXPECT() *MockAuthManagerMockRecorder {
	return m.recorder
}

// ChangeEmail mocks base method.
func (m *MockAuthManager) ChangeEmail(arg0 database.User, arg1 string) (*database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeEmail", arg0, arg1)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeEmail indicates an expected call of ChangeEmail.
func (mr *MockAuthManagerMockRecorder) ChangeEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeEmail", reflect.TypeOf((*MockAuthManager)(nil).ChangeEmail), arg0, arg1)
}

// ChangePassword mocks base method.
func (m *MockAuthManager) ChangePassword(arg0 database.User, arg1, arg2 string) (*database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAuthManagerMockRecorder) ChangePassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthManager)(nil).ChangePassword), arg0, arg1, arg2)
}

// ConfirmEmail mocks base method.
func (m *MockAuthManager) ConfirmEmail(arg0, arg1 string) (*database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmEmail", arg0, arg1)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmEmail indicates an expected call of ConfirmEmail.
func (mr *MockAuthManagerMockRecorder) ConfirmEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmEmail", reflect.TypeOf((*MockAuthManager)(nil).ConfirmEmail), arg0, arg1)
}

// Create mocks base method.
func (m *MockAuthManager) Create(arg0 managers.UserDetails) (*database.User, *database.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(*database.Token)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockAuthManagerMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthManager)(nil).Create), arg0)
}

// Login mocks base method.
func (m *MockAuthManager) Login(arg0, arg1 string) (*database.User, *database.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(*database.Token)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockAuthManagerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthManager)(nil).Login), arg0, arg1)
}

// Logout mocks base method.
func (m *MockAuthManager) Logout(arg0, arg1 string) (*database.User, *database.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(*database.Token)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthManagerMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthManager)(nil).Logout), arg0, arg1)
}

/*
StampWallet API Server

StampWallet API Server REST Specification

API version: 0.1.0
Contact: fbstachura@gmail.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TransactionStateEnum the model 'TransactionStateEnum'
type TransactionStateEnum string

// List of TransactionStateEnum
const (
	STARTED    TransactionStateEnum = "STARTED"
	PROCESSING TransactionStateEnum = "PROCESSING"
	FINISHED   TransactionStateEnum = "FINISHED"
	EXPIRED    TransactionStateEnum = "EXPIRED"
)

// All allowed values of TransactionStateEnum enum
var AllowedTransactionStateEnumEnumValues = []TransactionStateEnum{
	"STARTED",
	"PROCESSING",
	"FINISHED",
	"EXPIRED",
}

func (v *TransactionStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionStateEnum(value)
	for _, existing := range AllowedTransactionStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionStateEnum", value)
}

// NewTransactionStateEnumFromValue returns a pointer to a valid TransactionStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionStateEnumFromValue(v string) (*TransactionStateEnum, error) {
	ev := TransactionStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionStateEnum: valid values are %v", v, AllowedTransactionStateEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionStateEnum) IsValid() bool {
	for _, existing := range AllowedTransactionStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionStateEnum value
func (v TransactionStateEnum) Ptr() *TransactionStateEnum {
	return &v
}

type NullableTransactionStateEnum struct {
	value *TransactionStateEnum
	isSet bool
}

func (v NullableTransactionStateEnum) Get() *TransactionStateEnum {
	return v.value
}

func (v *NullableTransactionStateEnum) Set(val *TransactionStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionStateEnum(val *TransactionStateEnum) *NullableTransactionStateEnum {
	return &NullableTransactionStateEnum{value: val, isSet: true}
}

func (v NullableTransactionStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

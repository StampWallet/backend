// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StampWallet/backend/internal/database/accessors (interfaces: BusinessAuthorizedAccessor,UserAuthorizedAccessor,AuthorizedTransactionAccessor)

// Package mock_accessors is a generated GoMock package.
package mock_accessors

import (
	reflect "reflect"

	database "github.com/StampWallet/backend/internal/database"
	database0 "github.com/StampWallet/backend/internal/database/accessors"
	gomock "github.com/golang/mock/gomock"
)

// MockBusinessAuthorizedAccessor is a mock of BusinessAuthorizedAccessor interface.
type MockBusinessAuthorizedAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessAuthorizedAccessorMockRecorder
}

// MockBusinessAuthorizedAccessorMockRecorder is the mock recorder for MockBusinessAuthorizedAccessor.
type MockBusinessAuthorizedAccessorMockRecorder struct {
	mock *MockBusinessAuthorizedAccessor
}

// NewMockBusinessAuthorizedAccessor creates a new mock instance.
func NewMockBusinessAuthorizedAccessor(ctrl *gomock.Controller) *MockBusinessAuthorizedAccessor {
	mock := &MockBusinessAuthorizedAccessor{ctrl: ctrl}
	mock.recorder = &MockBusinessAuthorizedAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusinessAuthorizedAccessor) EXPECT() *MockBusinessAuthorizedAccessorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockBusinessAuthorizedAccessor) Get(arg0 *database.Business, arg1 database0.BusinessOwnedEntity) (database0.BusinessOwnedEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(database0.BusinessOwnedEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBusinessAuthorizedAccessorMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBusinessAuthorizedAccessor)(nil).Get), arg0, arg1)
}

// MockUserAuthorizedAccessor is a mock of UserAuthorizedAccessor interface.
type MockUserAuthorizedAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthorizedAccessorMockRecorder
}

// MockUserAuthorizedAccessorMockRecorder is the mock recorder for MockUserAuthorizedAccessor.
type MockUserAuthorizedAccessorMockRecorder struct {
	mock *MockUserAuthorizedAccessor
}

// NewMockUserAuthorizedAccessor creates a new mock instance.
func NewMockUserAuthorizedAccessor(ctrl *gomock.Controller) *MockUserAuthorizedAccessor {
	mock := &MockUserAuthorizedAccessor{ctrl: ctrl}
	mock.recorder = &MockUserAuthorizedAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAuthorizedAccessor) EXPECT() *MockUserAuthorizedAccessorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserAuthorizedAccessor) Get(arg0 *database.User, arg1 database0.UserOwnedEntity) (database0.UserOwnedEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(database0.UserOwnedEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserAuthorizedAccessorMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserAuthorizedAccessor)(nil).Get), arg0, arg1)
}

// MockAuthorizedTransactionAccessor is a mock of AuthorizedTransactionAccessor interface.
type MockAuthorizedTransactionAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizedTransactionAccessorMockRecorder
}

// MockAuthorizedTransactionAccessorMockRecorder is the mock recorder for MockAuthorizedTransactionAccessor.
type MockAuthorizedTransactionAccessorMockRecorder struct {
	mock *MockAuthorizedTransactionAccessor
}

// NewMockAuthorizedTransactionAccessor creates a new mock instance.
func NewMockAuthorizedTransactionAccessor(ctrl *gomock.Controller) *MockAuthorizedTransactionAccessor {
	mock := &MockAuthorizedTransactionAccessor{ctrl: ctrl}
	mock.recorder = &MockAuthorizedTransactionAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizedTransactionAccessor) EXPECT() *MockAuthorizedTransactionAccessorMockRecorder {
	return m.recorder
}

// GetForBusiness mocks base method.
func (m *MockAuthorizedTransactionAccessor) GetForBusiness(arg0 *database.Business, arg1 string) (*database.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForBusiness", arg0, arg1)
	ret0, _ := ret[0].(*database.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForBusiness indicates an expected call of GetForBusiness.
func (mr *MockAuthorizedTransactionAccessorMockRecorder) GetForBusiness(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForBusiness", reflect.TypeOf((*MockAuthorizedTransactionAccessor)(nil).GetForBusiness), arg0, arg1)
}

// GetForUser mocks base method.
func (m *MockAuthorizedTransactionAccessor) GetForUser(arg0 *database.User, arg1 string) (*database.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForUser", arg0, arg1)
	ret0, _ := ret[0].(*database.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForUser indicates an expected call of GetForUser.
func (mr *MockAuthorizedTransactionAccessorMockRecorder) GetForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForUser", reflect.TypeOf((*MockAuthorizedTransactionAccessor)(nil).GetForUser), arg0, arg1)
}
